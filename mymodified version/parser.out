Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MY
    NEW
    RETURN
    SHIFT
    SUB
    newl

Grammar

Rule 0     S' -> p_module
Rule 1     p_module -> package_dec
Rule 2     p_module -> body
Rule 3     p_module -> empty
Rule 4     body -> statementlist
Rule 5     body -> empty
Rule 6     statementlist -> statement
Rule 7     statementlist -> statementlist statement
Rule 8     statement -> var_dec
Rule 9     statement -> function_call
Rule 10    statement -> output
Rule 11    statement -> comment
Rule 12    statement -> cond_stat
Rule 13    package_dec -> PACKAGE KEYWORD SEMI upind body lowind NUMBER SEMI
Rule 14    upind -> <empty>
Rule 15    lowind -> <empty>
Rule 16    output -> KEYWORD out SEMI
Rule 17    out -> VARIABLE
Rule 18    out -> STRING
Rule 19    out -> out COMMA out
Rule 20    function_call -> KEYWORD LB argument RB SEMI
Rule 21    argument -> VARIABLE
Rule 22    argument -> STRING
Rule 23    argument -> argument COMMA argument
Rule 24    argument -> empty
Rule 25    var_dec -> VARIABLE EQUALS exp SEMI
Rule 26    var_dec -> VARIABLE EQUALS input SEMI
Rule 27    exp -> NUMBER
Rule 28    exp -> VARIABLE
Rule 29    exp -> STRING
Rule 30    exp -> exp OPER exp
Rule 31    input -> ALB KEYWORD ARB
Rule 32    comment -> COMMENT
Rule 33    cond_stat -> KEYWORD LB condition RB block
Rule 34    cond_stat -> KEYWORD LB for_cond RB l_braces body r_braces
Rule 35    for_cond -> VARIABLE EQUALS exp SEMI VARIABLE sign exp SEMI increment
Rule 36    increment -> VARIABLE OPER OPER
Rule 37    increment -> VARIABLE sign exp
Rule 38    block -> l_braces body r_braces
Rule 39    l_braces -> LFB
Rule 40    r_braces -> RFB
Rule 41    condition -> VARIABLE sign exp
Rule 42    sign -> EQUALS
Rule 43    sign -> OPER
Rule 44    sign -> ALB
Rule 45    sign -> ARB
Rule 46    sign -> sign sign
Rule 47    empty -> <empty>

Terminals, with rules where they appear

ALB                  : 31 44
ARB                  : 31 45
COMMA                : 19 23
COMMENT              : 32
EQUALS               : 25 26 35 42
KEYWORD              : 13 16 20 31 33 34
LB                   : 20 33 34
LFB                  : 39
MY                   : 
NEW                  : 
NUMBER               : 13 27
OPER                 : 30 36 36 43
PACKAGE              : 13
RB                   : 20 33 34
RETURN               : 
RFB                  : 40
SEMI                 : 13 13 16 20 25 26 35 35
SHIFT                : 
STRING               : 18 22 29
SUB                  : 
VARIABLE             : 17 21 25 26 28 35 35 36 37 41
error                : 
newl                 : 

Nonterminals, with rules where they appear

argument             : 20 23 23
block                : 33
body                 : 2 13 34 38
comment              : 11
cond_stat            : 12
condition            : 33
empty                : 3 5 24
exp                  : 25 30 30 35 35 37 41
for_cond             : 34
function_call        : 9
increment            : 35
input                : 26
l_braces             : 34 38
lowind               : 13
out                  : 16 19 19
output               : 10
p_module             : 0
package_dec          : 1
r_braces             : 34 38
sign                 : 35 37 41 46 46
statement            : 6 7
statementlist        : 4 7
upind                : 13
var_dec              : 8

Parsing method: LALR

state 0

    (0) S' -> . p_module
    (1) p_module -> . package_dec
    (2) p_module -> . body
    (3) p_module -> . empty
    (13) package_dec -> . PACKAGE KEYWORD SEMI upind body lowind NUMBER SEMI
    (4) body -> . statementlist
    (5) body -> . empty
    (47) empty -> .
    (6) statementlist -> . statement
    (7) statementlist -> . statementlist statement
    (8) statement -> . var_dec
    (9) statement -> . function_call
    (10) statement -> . output
    (11) statement -> . comment
    (12) statement -> . cond_stat
    (25) var_dec -> . VARIABLE EQUALS exp SEMI
    (26) var_dec -> . VARIABLE EQUALS input SEMI
    (20) function_call -> . KEYWORD LB argument RB SEMI
    (16) output -> . KEYWORD out SEMI
    (32) comment -> . COMMENT
    (33) cond_stat -> . KEYWORD LB condition RB block
    (34) cond_stat -> . KEYWORD LB for_cond RB l_braces body r_braces

    PACKAGE         shift and go to state 5
    $end            reduce using rule 47 (empty -> .)
    VARIABLE        shift and go to state 14
    KEYWORD         shift and go to state 6
    COMMENT         shift and go to state 15

    p_module                       shift and go to state 1
    package_dec                    shift and go to state 2
    body                           shift and go to state 3
    empty                          shift and go to state 4
    statementlist                  shift and go to state 7
    statement                      shift and go to state 8
    var_dec                        shift and go to state 9
    function_call                  shift and go to state 10
    output                         shift and go to state 11
    comment                        shift and go to state 12
    cond_stat                      shift and go to state 13

state 1

    (0) S' -> p_module .



state 2

    (1) p_module -> package_dec .

    $end            reduce using rule 1 (p_module -> package_dec .)


state 3

    (2) p_module -> body .

    $end            reduce using rule 2 (p_module -> body .)


state 4

    (3) p_module -> empty .
    (5) body -> empty .

  ! reduce/reduce conflict for $end resolved using rule 3 (p_module -> empty .)
    $end            reduce using rule 3 (p_module -> empty .)

  ! $end            [ reduce using rule 5 (body -> empty .) ]


state 5

    (13) package_dec -> PACKAGE . KEYWORD SEMI upind body lowind NUMBER SEMI

    KEYWORD         shift and go to state 16


state 6

    (20) function_call -> KEYWORD . LB argument RB SEMI
    (16) output -> KEYWORD . out SEMI
    (33) cond_stat -> KEYWORD . LB condition RB block
    (34) cond_stat -> KEYWORD . LB for_cond RB l_braces body r_braces
    (17) out -> . VARIABLE
    (18) out -> . STRING
    (19) out -> . out COMMA out

    LB              shift and go to state 17
    VARIABLE        shift and go to state 19
    STRING          shift and go to state 20

    out                            shift and go to state 18

state 7

    (4) body -> statementlist .
    (7) statementlist -> statementlist . statement
    (8) statement -> . var_dec
    (9) statement -> . function_call
    (10) statement -> . output
    (11) statement -> . comment
    (12) statement -> . cond_stat
    (25) var_dec -> . VARIABLE EQUALS exp SEMI
    (26) var_dec -> . VARIABLE EQUALS input SEMI
    (20) function_call -> . KEYWORD LB argument RB SEMI
    (16) output -> . KEYWORD out SEMI
    (32) comment -> . COMMENT
    (33) cond_stat -> . KEYWORD LB condition RB block
    (34) cond_stat -> . KEYWORD LB for_cond RB l_braces body r_braces

    $end            reduce using rule 4 (body -> statementlist .)
    NUMBER          reduce using rule 4 (body -> statementlist .)
    RFB             reduce using rule 4 (body -> statementlist .)
    VARIABLE        shift and go to state 14
    KEYWORD         shift and go to state 6
    COMMENT         shift and go to state 15

    statement                      shift and go to state 21
    var_dec                        shift and go to state 9
    function_call                  shift and go to state 10
    output                         shift and go to state 11
    comment                        shift and go to state 12
    cond_stat                      shift and go to state 13

state 8

    (6) statementlist -> statement .

    VARIABLE        reduce using rule 6 (statementlist -> statement .)
    KEYWORD         reduce using rule 6 (statementlist -> statement .)
    COMMENT         reduce using rule 6 (statementlist -> statement .)
    $end            reduce using rule 6 (statementlist -> statement .)
    NUMBER          reduce using rule 6 (statementlist -> statement .)
    RFB             reduce using rule 6 (statementlist -> statement .)


state 9

    (8) statement -> var_dec .

    VARIABLE        reduce using rule 8 (statement -> var_dec .)
    KEYWORD         reduce using rule 8 (statement -> var_dec .)
    COMMENT         reduce using rule 8 (statement -> var_dec .)
    $end            reduce using rule 8 (statement -> var_dec .)
    NUMBER          reduce using rule 8 (statement -> var_dec .)
    RFB             reduce using rule 8 (statement -> var_dec .)


state 10

    (9) statement -> function_call .

    VARIABLE        reduce using rule 9 (statement -> function_call .)
    KEYWORD         reduce using rule 9 (statement -> function_call .)
    COMMENT         reduce using rule 9 (statement -> function_call .)
    $end            reduce using rule 9 (statement -> function_call .)
    NUMBER          reduce using rule 9 (statement -> function_call .)
    RFB             reduce using rule 9 (statement -> function_call .)


state 11

    (10) statement -> output .

    VARIABLE        reduce using rule 10 (statement -> output .)
    KEYWORD         reduce using rule 10 (statement -> output .)
    COMMENT         reduce using rule 10 (statement -> output .)
    $end            reduce using rule 10 (statement -> output .)
    NUMBER          reduce using rule 10 (statement -> output .)
    RFB             reduce using rule 10 (statement -> output .)


state 12

    (11) statement -> comment .

    VARIABLE        reduce using rule 11 (statement -> comment .)
    KEYWORD         reduce using rule 11 (statement -> comment .)
    COMMENT         reduce using rule 11 (statement -> comment .)
    $end            reduce using rule 11 (statement -> comment .)
    NUMBER          reduce using rule 11 (statement -> comment .)
    RFB             reduce using rule 11 (statement -> comment .)


state 13

    (12) statement -> cond_stat .

    VARIABLE        reduce using rule 12 (statement -> cond_stat .)
    KEYWORD         reduce using rule 12 (statement -> cond_stat .)
    COMMENT         reduce using rule 12 (statement -> cond_stat .)
    $end            reduce using rule 12 (statement -> cond_stat .)
    NUMBER          reduce using rule 12 (statement -> cond_stat .)
    RFB             reduce using rule 12 (statement -> cond_stat .)


state 14

    (25) var_dec -> VARIABLE . EQUALS exp SEMI
    (26) var_dec -> VARIABLE . EQUALS input SEMI

    EQUALS          shift and go to state 22


state 15

    (32) comment -> COMMENT .

    VARIABLE        reduce using rule 32 (comment -> COMMENT .)
    KEYWORD         reduce using rule 32 (comment -> COMMENT .)
    COMMENT         reduce using rule 32 (comment -> COMMENT .)
    $end            reduce using rule 32 (comment -> COMMENT .)
    NUMBER          reduce using rule 32 (comment -> COMMENT .)
    RFB             reduce using rule 32 (comment -> COMMENT .)


state 16

    (13) package_dec -> PACKAGE KEYWORD . SEMI upind body lowind NUMBER SEMI

    SEMI            shift and go to state 23


state 17

    (20) function_call -> KEYWORD LB . argument RB SEMI
    (33) cond_stat -> KEYWORD LB . condition RB block
    (34) cond_stat -> KEYWORD LB . for_cond RB l_braces body r_braces
    (21) argument -> . VARIABLE
    (22) argument -> . STRING
    (23) argument -> . argument COMMA argument
    (24) argument -> . empty
    (41) condition -> . VARIABLE sign exp
    (35) for_cond -> . VARIABLE EQUALS exp SEMI VARIABLE sign exp SEMI increment
    (47) empty -> .

    VARIABLE        shift and go to state 27
    STRING          shift and go to state 28
    RB              reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    argument                       shift and go to state 24
    condition                      shift and go to state 25
    for_cond                       shift and go to state 26
    empty                          shift and go to state 29

state 18

    (16) output -> KEYWORD out . SEMI
    (19) out -> out . COMMA out

    SEMI            shift and go to state 30
    COMMA           shift and go to state 31


state 19

    (17) out -> VARIABLE .

    SEMI            reduce using rule 17 (out -> VARIABLE .)
    COMMA           reduce using rule 17 (out -> VARIABLE .)


state 20

    (18) out -> STRING .

    SEMI            reduce using rule 18 (out -> STRING .)
    COMMA           reduce using rule 18 (out -> STRING .)


state 21

    (7) statementlist -> statementlist statement .

    VARIABLE        reduce using rule 7 (statementlist -> statementlist statement .)
    KEYWORD         reduce using rule 7 (statementlist -> statementlist statement .)
    COMMENT         reduce using rule 7 (statementlist -> statementlist statement .)
    $end            reduce using rule 7 (statementlist -> statementlist statement .)
    NUMBER          reduce using rule 7 (statementlist -> statementlist statement .)
    RFB             reduce using rule 7 (statementlist -> statementlist statement .)


state 22

    (25) var_dec -> VARIABLE EQUALS . exp SEMI
    (26) var_dec -> VARIABLE EQUALS . input SEMI
    (27) exp -> . NUMBER
    (28) exp -> . VARIABLE
    (29) exp -> . STRING
    (30) exp -> . exp OPER exp
    (31) input -> . ALB KEYWORD ARB

    NUMBER          shift and go to state 35
    VARIABLE        shift and go to state 32
    STRING          shift and go to state 36
    ALB             shift and go to state 37

    exp                            shift and go to state 33
    input                          shift and go to state 34

state 23

    (13) package_dec -> PACKAGE KEYWORD SEMI . upind body lowind NUMBER SEMI
    (14) upind -> .

    VARIABLE        reduce using rule 14 (upind -> .)
    KEYWORD         reduce using rule 14 (upind -> .)
    COMMENT         reduce using rule 14 (upind -> .)
    NUMBER          reduce using rule 14 (upind -> .)

    upind                          shift and go to state 38

state 24

    (20) function_call -> KEYWORD LB argument . RB SEMI
    (23) argument -> argument . COMMA argument

    RB              shift and go to state 39
    COMMA           shift and go to state 40


state 25

    (33) cond_stat -> KEYWORD LB condition . RB block

    RB              shift and go to state 41


state 26

    (34) cond_stat -> KEYWORD LB for_cond . RB l_braces body r_braces

    RB              shift and go to state 42


state 27

    (21) argument -> VARIABLE .
    (41) condition -> VARIABLE . sign exp
    (35) for_cond -> VARIABLE . EQUALS exp SEMI VARIABLE sign exp SEMI increment
    (42) sign -> . EQUALS
    (43) sign -> . OPER
    (44) sign -> . ALB
    (45) sign -> . ARB
    (46) sign -> . sign sign

    RB              reduce using rule 21 (argument -> VARIABLE .)
    COMMA           reduce using rule 21 (argument -> VARIABLE .)
    EQUALS          shift and go to state 44
    OPER            shift and go to state 45
    ALB             shift and go to state 46
    ARB             shift and go to state 47

    sign                           shift and go to state 43

state 28

    (22) argument -> STRING .

    RB              reduce using rule 22 (argument -> STRING .)
    COMMA           reduce using rule 22 (argument -> STRING .)


state 29

    (24) argument -> empty .

    RB              reduce using rule 24 (argument -> empty .)
    COMMA           reduce using rule 24 (argument -> empty .)


state 30

    (16) output -> KEYWORD out SEMI .

    VARIABLE        reduce using rule 16 (output -> KEYWORD out SEMI .)
    KEYWORD         reduce using rule 16 (output -> KEYWORD out SEMI .)
    COMMENT         reduce using rule 16 (output -> KEYWORD out SEMI .)
    $end            reduce using rule 16 (output -> KEYWORD out SEMI .)
    NUMBER          reduce using rule 16 (output -> KEYWORD out SEMI .)
    RFB             reduce using rule 16 (output -> KEYWORD out SEMI .)


state 31

    (19) out -> out COMMA . out
    (17) out -> . VARIABLE
    (18) out -> . STRING
    (19) out -> . out COMMA out

    VARIABLE        shift and go to state 19
    STRING          shift and go to state 20

    out                            shift and go to state 48

state 32

    (28) exp -> VARIABLE .

    SEMI            reduce using rule 28 (exp -> VARIABLE .)
    OPER            reduce using rule 28 (exp -> VARIABLE .)
    RB              reduce using rule 28 (exp -> VARIABLE .)


state 33

    (25) var_dec -> VARIABLE EQUALS exp . SEMI
    (30) exp -> exp . OPER exp

    SEMI            shift and go to state 49
    OPER            shift and go to state 50


state 34

    (26) var_dec -> VARIABLE EQUALS input . SEMI

    SEMI            shift and go to state 51


state 35

    (27) exp -> NUMBER .

    SEMI            reduce using rule 27 (exp -> NUMBER .)
    OPER            reduce using rule 27 (exp -> NUMBER .)
    RB              reduce using rule 27 (exp -> NUMBER .)


state 36

    (29) exp -> STRING .

    SEMI            reduce using rule 29 (exp -> STRING .)
    OPER            reduce using rule 29 (exp -> STRING .)
    RB              reduce using rule 29 (exp -> STRING .)


state 37

    (31) input -> ALB . KEYWORD ARB

    KEYWORD         shift and go to state 52


state 38

    (13) package_dec -> PACKAGE KEYWORD SEMI upind . body lowind NUMBER SEMI
    (4) body -> . statementlist
    (5) body -> . empty
    (6) statementlist -> . statement
    (7) statementlist -> . statementlist statement
    (47) empty -> .
    (8) statement -> . var_dec
    (9) statement -> . function_call
    (10) statement -> . output
    (11) statement -> . comment
    (12) statement -> . cond_stat
    (25) var_dec -> . VARIABLE EQUALS exp SEMI
    (26) var_dec -> . VARIABLE EQUALS input SEMI
    (20) function_call -> . KEYWORD LB argument RB SEMI
    (16) output -> . KEYWORD out SEMI
    (32) comment -> . COMMENT
    (33) cond_stat -> . KEYWORD LB condition RB block
    (34) cond_stat -> . KEYWORD LB for_cond RB l_braces body r_braces

    NUMBER          reduce using rule 47 (empty -> .)
    VARIABLE        shift and go to state 14
    KEYWORD         shift and go to state 6
    COMMENT         shift and go to state 15

    body                           shift and go to state 53
    statementlist                  shift and go to state 7
    empty                          shift and go to state 54
    statement                      shift and go to state 8
    var_dec                        shift and go to state 9
    function_call                  shift and go to state 10
    output                         shift and go to state 11
    comment                        shift and go to state 12
    cond_stat                      shift and go to state 13

state 39

    (20) function_call -> KEYWORD LB argument RB . SEMI

    SEMI            shift and go to state 55


state 40

    (23) argument -> argument COMMA . argument
    (21) argument -> . VARIABLE
    (22) argument -> . STRING
    (23) argument -> . argument COMMA argument
    (24) argument -> . empty
    (47) empty -> .

    VARIABLE        shift and go to state 57
    STRING          shift and go to state 28
    COMMA           reduce using rule 47 (empty -> .)
    RB              reduce using rule 47 (empty -> .)

    argument                       shift and go to state 56
    empty                          shift and go to state 29

state 41

    (33) cond_stat -> KEYWORD LB condition RB . block
    (38) block -> . l_braces body r_braces
    (39) l_braces -> . LFB

    LFB             shift and go to state 60

    block                          shift and go to state 58
    l_braces                       shift and go to state 59

state 42

    (34) cond_stat -> KEYWORD LB for_cond RB . l_braces body r_braces
    (39) l_braces -> . LFB

    LFB             shift and go to state 60

    l_braces                       shift and go to state 61

state 43

    (41) condition -> VARIABLE sign . exp
    (46) sign -> sign . sign
    (27) exp -> . NUMBER
    (28) exp -> . VARIABLE
    (29) exp -> . STRING
    (30) exp -> . exp OPER exp
    (42) sign -> . EQUALS
    (43) sign -> . OPER
    (44) sign -> . ALB
    (45) sign -> . ARB
    (46) sign -> . sign sign

    NUMBER          shift and go to state 35
    VARIABLE        shift and go to state 32
    STRING          shift and go to state 36
    EQUALS          shift and go to state 64
    OPER            shift and go to state 45
    ALB             shift and go to state 46
    ARB             shift and go to state 47

    sign                           shift and go to state 62
    exp                            shift and go to state 63

state 44

    (35) for_cond -> VARIABLE EQUALS . exp SEMI VARIABLE sign exp SEMI increment
    (42) sign -> EQUALS .
    (27) exp -> . NUMBER
    (28) exp -> . VARIABLE
    (29) exp -> . STRING
    (30) exp -> . exp OPER exp

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    EQUALS          reduce using rule 42 (sign -> EQUALS .)
    OPER            reduce using rule 42 (sign -> EQUALS .)
    ALB             reduce using rule 42 (sign -> EQUALS .)
    ARB             reduce using rule 42 (sign -> EQUALS .)
    NUMBER          shift and go to state 35
    VARIABLE        shift and go to state 32
    STRING          shift and go to state 36

  ! NUMBER          [ reduce using rule 42 (sign -> EQUALS .) ]
  ! VARIABLE        [ reduce using rule 42 (sign -> EQUALS .) ]
  ! STRING          [ reduce using rule 42 (sign -> EQUALS .) ]

    exp                            shift and go to state 65

state 45

    (43) sign -> OPER .

    NUMBER          reduce using rule 43 (sign -> OPER .)
    VARIABLE        reduce using rule 43 (sign -> OPER .)
    STRING          reduce using rule 43 (sign -> OPER .)
    EQUALS          reduce using rule 43 (sign -> OPER .)
    OPER            reduce using rule 43 (sign -> OPER .)
    ALB             reduce using rule 43 (sign -> OPER .)
    ARB             reduce using rule 43 (sign -> OPER .)


state 46

    (44) sign -> ALB .

    NUMBER          reduce using rule 44 (sign -> ALB .)
    VARIABLE        reduce using rule 44 (sign -> ALB .)
    STRING          reduce using rule 44 (sign -> ALB .)
    EQUALS          reduce using rule 44 (sign -> ALB .)
    OPER            reduce using rule 44 (sign -> ALB .)
    ALB             reduce using rule 44 (sign -> ALB .)
    ARB             reduce using rule 44 (sign -> ALB .)


state 47

    (45) sign -> ARB .

    NUMBER          reduce using rule 45 (sign -> ARB .)
    VARIABLE        reduce using rule 45 (sign -> ARB .)
    STRING          reduce using rule 45 (sign -> ARB .)
    EQUALS          reduce using rule 45 (sign -> ARB .)
    OPER            reduce using rule 45 (sign -> ARB .)
    ALB             reduce using rule 45 (sign -> ARB .)
    ARB             reduce using rule 45 (sign -> ARB .)


state 48

    (19) out -> out COMMA out .
    (19) out -> out . COMMA out

  ! shift/reduce conflict for COMMA resolved as shift
    SEMI            reduce using rule 19 (out -> out COMMA out .)
    COMMA           shift and go to state 31

  ! COMMA           [ reduce using rule 19 (out -> out COMMA out .) ]


state 49

    (25) var_dec -> VARIABLE EQUALS exp SEMI .

    VARIABLE        reduce using rule 25 (var_dec -> VARIABLE EQUALS exp SEMI .)
    KEYWORD         reduce using rule 25 (var_dec -> VARIABLE EQUALS exp SEMI .)
    COMMENT         reduce using rule 25 (var_dec -> VARIABLE EQUALS exp SEMI .)
    $end            reduce using rule 25 (var_dec -> VARIABLE EQUALS exp SEMI .)
    NUMBER          reduce using rule 25 (var_dec -> VARIABLE EQUALS exp SEMI .)
    RFB             reduce using rule 25 (var_dec -> VARIABLE EQUALS exp SEMI .)


state 50

    (30) exp -> exp OPER . exp
    (27) exp -> . NUMBER
    (28) exp -> . VARIABLE
    (29) exp -> . STRING
    (30) exp -> . exp OPER exp

    NUMBER          shift and go to state 35
    VARIABLE        shift and go to state 32
    STRING          shift and go to state 36

    exp                            shift and go to state 66

state 51

    (26) var_dec -> VARIABLE EQUALS input SEMI .

    VARIABLE        reduce using rule 26 (var_dec -> VARIABLE EQUALS input SEMI .)
    KEYWORD         reduce using rule 26 (var_dec -> VARIABLE EQUALS input SEMI .)
    COMMENT         reduce using rule 26 (var_dec -> VARIABLE EQUALS input SEMI .)
    $end            reduce using rule 26 (var_dec -> VARIABLE EQUALS input SEMI .)
    NUMBER          reduce using rule 26 (var_dec -> VARIABLE EQUALS input SEMI .)
    RFB             reduce using rule 26 (var_dec -> VARIABLE EQUALS input SEMI .)


state 52

    (31) input -> ALB KEYWORD . ARB

    ARB             shift and go to state 67


state 53

    (13) package_dec -> PACKAGE KEYWORD SEMI upind body . lowind NUMBER SEMI
    (15) lowind -> .

    NUMBER          reduce using rule 15 (lowind -> .)

    lowind                         shift and go to state 68

state 54

    (5) body -> empty .

    NUMBER          reduce using rule 5 (body -> empty .)
    RFB             reduce using rule 5 (body -> empty .)


state 55

    (20) function_call -> KEYWORD LB argument RB SEMI .

    VARIABLE        reduce using rule 20 (function_call -> KEYWORD LB argument RB SEMI .)
    KEYWORD         reduce using rule 20 (function_call -> KEYWORD LB argument RB SEMI .)
    COMMENT         reduce using rule 20 (function_call -> KEYWORD LB argument RB SEMI .)
    $end            reduce using rule 20 (function_call -> KEYWORD LB argument RB SEMI .)
    NUMBER          reduce using rule 20 (function_call -> KEYWORD LB argument RB SEMI .)
    RFB             reduce using rule 20 (function_call -> KEYWORD LB argument RB SEMI .)


state 56

    (23) argument -> argument COMMA argument .
    (23) argument -> argument . COMMA argument

  ! shift/reduce conflict for COMMA resolved as shift
    RB              reduce using rule 23 (argument -> argument COMMA argument .)
    COMMA           shift and go to state 40

  ! COMMA           [ reduce using rule 23 (argument -> argument COMMA argument .) ]


state 57

    (21) argument -> VARIABLE .

    COMMA           reduce using rule 21 (argument -> VARIABLE .)
    RB              reduce using rule 21 (argument -> VARIABLE .)


state 58

    (33) cond_stat -> KEYWORD LB condition RB block .

    VARIABLE        reduce using rule 33 (cond_stat -> KEYWORD LB condition RB block .)
    KEYWORD         reduce using rule 33 (cond_stat -> KEYWORD LB condition RB block .)
    COMMENT         reduce using rule 33 (cond_stat -> KEYWORD LB condition RB block .)
    $end            reduce using rule 33 (cond_stat -> KEYWORD LB condition RB block .)
    NUMBER          reduce using rule 33 (cond_stat -> KEYWORD LB condition RB block .)
    RFB             reduce using rule 33 (cond_stat -> KEYWORD LB condition RB block .)


state 59

    (38) block -> l_braces . body r_braces
    (4) body -> . statementlist
    (5) body -> . empty
    (6) statementlist -> . statement
    (7) statementlist -> . statementlist statement
    (47) empty -> .
    (8) statement -> . var_dec
    (9) statement -> . function_call
    (10) statement -> . output
    (11) statement -> . comment
    (12) statement -> . cond_stat
    (25) var_dec -> . VARIABLE EQUALS exp SEMI
    (26) var_dec -> . VARIABLE EQUALS input SEMI
    (20) function_call -> . KEYWORD LB argument RB SEMI
    (16) output -> . KEYWORD out SEMI
    (32) comment -> . COMMENT
    (33) cond_stat -> . KEYWORD LB condition RB block
    (34) cond_stat -> . KEYWORD LB for_cond RB l_braces body r_braces

    RFB             reduce using rule 47 (empty -> .)
    VARIABLE        shift and go to state 14
    KEYWORD         shift and go to state 6
    COMMENT         shift and go to state 15

    body                           shift and go to state 69
    statementlist                  shift and go to state 7
    empty                          shift and go to state 54
    statement                      shift and go to state 8
    var_dec                        shift and go to state 9
    function_call                  shift and go to state 10
    output                         shift and go to state 11
    comment                        shift and go to state 12
    cond_stat                      shift and go to state 13

state 60

    (39) l_braces -> LFB .

    VARIABLE        reduce using rule 39 (l_braces -> LFB .)
    KEYWORD         reduce using rule 39 (l_braces -> LFB .)
    COMMENT         reduce using rule 39 (l_braces -> LFB .)
    RFB             reduce using rule 39 (l_braces -> LFB .)


state 61

    (34) cond_stat -> KEYWORD LB for_cond RB l_braces . body r_braces
    (4) body -> . statementlist
    (5) body -> . empty
    (6) statementlist -> . statement
    (7) statementlist -> . statementlist statement
    (47) empty -> .
    (8) statement -> . var_dec
    (9) statement -> . function_call
    (10) statement -> . output
    (11) statement -> . comment
    (12) statement -> . cond_stat
    (25) var_dec -> . VARIABLE EQUALS exp SEMI
    (26) var_dec -> . VARIABLE EQUALS input SEMI
    (20) function_call -> . KEYWORD LB argument RB SEMI
    (16) output -> . KEYWORD out SEMI
    (32) comment -> . COMMENT
    (33) cond_stat -> . KEYWORD LB condition RB block
    (34) cond_stat -> . KEYWORD LB for_cond RB l_braces body r_braces

    RFB             reduce using rule 47 (empty -> .)
    VARIABLE        shift and go to state 14
    KEYWORD         shift and go to state 6
    COMMENT         shift and go to state 15

    body                           shift and go to state 70
    statementlist                  shift and go to state 7
    empty                          shift and go to state 54
    statement                      shift and go to state 8
    var_dec                        shift and go to state 9
    function_call                  shift and go to state 10
    output                         shift and go to state 11
    comment                        shift and go to state 12
    cond_stat                      shift and go to state 13

state 62

    (46) sign -> sign sign .
    (46) sign -> sign . sign
    (42) sign -> . EQUALS
    (43) sign -> . OPER
    (44) sign -> . ALB
    (45) sign -> . ARB
    (46) sign -> . sign sign

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for OPER resolved as shift
  ! shift/reduce conflict for ALB resolved as shift
  ! shift/reduce conflict for ARB resolved as shift
    NUMBER          reduce using rule 46 (sign -> sign sign .)
    VARIABLE        reduce using rule 46 (sign -> sign sign .)
    STRING          reduce using rule 46 (sign -> sign sign .)
    EQUALS          shift and go to state 64
    OPER            shift and go to state 45
    ALB             shift and go to state 46
    ARB             shift and go to state 47

  ! EQUALS          [ reduce using rule 46 (sign -> sign sign .) ]
  ! OPER            [ reduce using rule 46 (sign -> sign sign .) ]
  ! ALB             [ reduce using rule 46 (sign -> sign sign .) ]
  ! ARB             [ reduce using rule 46 (sign -> sign sign .) ]

    sign                           shift and go to state 62

state 63

    (41) condition -> VARIABLE sign exp .
    (30) exp -> exp . OPER exp

    RB              reduce using rule 41 (condition -> VARIABLE sign exp .)
    OPER            shift and go to state 50


state 64

    (42) sign -> EQUALS .

    EQUALS          reduce using rule 42 (sign -> EQUALS .)
    OPER            reduce using rule 42 (sign -> EQUALS .)
    ALB             reduce using rule 42 (sign -> EQUALS .)
    ARB             reduce using rule 42 (sign -> EQUALS .)
    NUMBER          reduce using rule 42 (sign -> EQUALS .)
    VARIABLE        reduce using rule 42 (sign -> EQUALS .)
    STRING          reduce using rule 42 (sign -> EQUALS .)


state 65

    (35) for_cond -> VARIABLE EQUALS exp . SEMI VARIABLE sign exp SEMI increment
    (30) exp -> exp . OPER exp

    SEMI            shift and go to state 71
    OPER            shift and go to state 50


state 66

    (30) exp -> exp OPER exp .
    (30) exp -> exp . OPER exp

  ! shift/reduce conflict for OPER resolved as shift
    SEMI            reduce using rule 30 (exp -> exp OPER exp .)
    RB              reduce using rule 30 (exp -> exp OPER exp .)
    OPER            shift and go to state 50

  ! OPER            [ reduce using rule 30 (exp -> exp OPER exp .) ]


state 67

    (31) input -> ALB KEYWORD ARB .

    SEMI            reduce using rule 31 (input -> ALB KEYWORD ARB .)


state 68

    (13) package_dec -> PACKAGE KEYWORD SEMI upind body lowind . NUMBER SEMI

    NUMBER          shift and go to state 72


state 69

    (38) block -> l_braces body . r_braces
    (40) r_braces -> . RFB

    RFB             shift and go to state 74

    r_braces                       shift and go to state 73

state 70

    (34) cond_stat -> KEYWORD LB for_cond RB l_braces body . r_braces
    (40) r_braces -> . RFB

    RFB             shift and go to state 74

    r_braces                       shift and go to state 75

state 71

    (35) for_cond -> VARIABLE EQUALS exp SEMI . VARIABLE sign exp SEMI increment

    VARIABLE        shift and go to state 76


state 72

    (13) package_dec -> PACKAGE KEYWORD SEMI upind body lowind NUMBER . SEMI

    SEMI            shift and go to state 77


state 73

    (38) block -> l_braces body r_braces .

    VARIABLE        reduce using rule 38 (block -> l_braces body r_braces .)
    KEYWORD         reduce using rule 38 (block -> l_braces body r_braces .)
    COMMENT         reduce using rule 38 (block -> l_braces body r_braces .)
    $end            reduce using rule 38 (block -> l_braces body r_braces .)
    NUMBER          reduce using rule 38 (block -> l_braces body r_braces .)
    RFB             reduce using rule 38 (block -> l_braces body r_braces .)


state 74

    (40) r_braces -> RFB .

    VARIABLE        reduce using rule 40 (r_braces -> RFB .)
    KEYWORD         reduce using rule 40 (r_braces -> RFB .)
    COMMENT         reduce using rule 40 (r_braces -> RFB .)
    $end            reduce using rule 40 (r_braces -> RFB .)
    NUMBER          reduce using rule 40 (r_braces -> RFB .)
    RFB             reduce using rule 40 (r_braces -> RFB .)


state 75

    (34) cond_stat -> KEYWORD LB for_cond RB l_braces body r_braces .

    VARIABLE        reduce using rule 34 (cond_stat -> KEYWORD LB for_cond RB l_braces body r_braces .)
    KEYWORD         reduce using rule 34 (cond_stat -> KEYWORD LB for_cond RB l_braces body r_braces .)
    COMMENT         reduce using rule 34 (cond_stat -> KEYWORD LB for_cond RB l_braces body r_braces .)
    $end            reduce using rule 34 (cond_stat -> KEYWORD LB for_cond RB l_braces body r_braces .)
    NUMBER          reduce using rule 34 (cond_stat -> KEYWORD LB for_cond RB l_braces body r_braces .)
    RFB             reduce using rule 34 (cond_stat -> KEYWORD LB for_cond RB l_braces body r_braces .)


state 76

    (35) for_cond -> VARIABLE EQUALS exp SEMI VARIABLE . sign exp SEMI increment
    (42) sign -> . EQUALS
    (43) sign -> . OPER
    (44) sign -> . ALB
    (45) sign -> . ARB
    (46) sign -> . sign sign

    EQUALS          shift and go to state 64
    OPER            shift and go to state 45
    ALB             shift and go to state 46
    ARB             shift and go to state 47

    sign                           shift and go to state 78

state 77

    (13) package_dec -> PACKAGE KEYWORD SEMI upind body lowind NUMBER SEMI .

    $end            reduce using rule 13 (package_dec -> PACKAGE KEYWORD SEMI upind body lowind NUMBER SEMI .)


state 78

    (35) for_cond -> VARIABLE EQUALS exp SEMI VARIABLE sign . exp SEMI increment
    (46) sign -> sign . sign
    (27) exp -> . NUMBER
    (28) exp -> . VARIABLE
    (29) exp -> . STRING
    (30) exp -> . exp OPER exp
    (42) sign -> . EQUALS
    (43) sign -> . OPER
    (44) sign -> . ALB
    (45) sign -> . ARB
    (46) sign -> . sign sign

    NUMBER          shift and go to state 35
    VARIABLE        shift and go to state 32
    STRING          shift and go to state 36
    EQUALS          shift and go to state 64
    OPER            shift and go to state 45
    ALB             shift and go to state 46
    ARB             shift and go to state 47

    exp                            shift and go to state 79
    sign                           shift and go to state 62

state 79

    (35) for_cond -> VARIABLE EQUALS exp SEMI VARIABLE sign exp . SEMI increment
    (30) exp -> exp . OPER exp

    SEMI            shift and go to state 80
    OPER            shift and go to state 50


state 80

    (35) for_cond -> VARIABLE EQUALS exp SEMI VARIABLE sign exp SEMI . increment
    (36) increment -> . VARIABLE OPER OPER
    (37) increment -> . VARIABLE sign exp

    VARIABLE        shift and go to state 81

    increment                      shift and go to state 82

state 81

    (36) increment -> VARIABLE . OPER OPER
    (37) increment -> VARIABLE . sign exp
    (42) sign -> . EQUALS
    (43) sign -> . OPER
    (44) sign -> . ALB
    (45) sign -> . ARB
    (46) sign -> . sign sign

    OPER            shift and go to state 83
    EQUALS          shift and go to state 64
    ALB             shift and go to state 46
    ARB             shift and go to state 47

    sign                           shift and go to state 84

state 82

    (35) for_cond -> VARIABLE EQUALS exp SEMI VARIABLE sign exp SEMI increment .

    RB              reduce using rule 35 (for_cond -> VARIABLE EQUALS exp SEMI VARIABLE sign exp SEMI increment .)


state 83

    (36) increment -> VARIABLE OPER . OPER
    (43) sign -> OPER .

  ! shift/reduce conflict for OPER resolved as shift
    OPER            shift and go to state 85
    NUMBER          reduce using rule 43 (sign -> OPER .)
    VARIABLE        reduce using rule 43 (sign -> OPER .)
    STRING          reduce using rule 43 (sign -> OPER .)
    EQUALS          reduce using rule 43 (sign -> OPER .)
    ALB             reduce using rule 43 (sign -> OPER .)
    ARB             reduce using rule 43 (sign -> OPER .)

  ! OPER            [ reduce using rule 43 (sign -> OPER .) ]


state 84

    (37) increment -> VARIABLE sign . exp
    (46) sign -> sign . sign
    (27) exp -> . NUMBER
    (28) exp -> . VARIABLE
    (29) exp -> . STRING
    (30) exp -> . exp OPER exp
    (42) sign -> . EQUALS
    (43) sign -> . OPER
    (44) sign -> . ALB
    (45) sign -> . ARB
    (46) sign -> . sign sign

    NUMBER          shift and go to state 35
    VARIABLE        shift and go to state 32
    STRING          shift and go to state 36
    EQUALS          shift and go to state 64
    OPER            shift and go to state 45
    ALB             shift and go to state 46
    ARB             shift and go to state 47

    sign                           shift and go to state 62
    exp                            shift and go to state 86

state 85

    (36) increment -> VARIABLE OPER OPER .

    RB              reduce using rule 36 (increment -> VARIABLE OPER OPER .)


state 86

    (37) increment -> VARIABLE sign exp .
    (30) exp -> exp . OPER exp

    RB              reduce using rule 37 (increment -> VARIABLE sign exp .)
    OPER            shift and go to state 50

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 44 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 44 resolved as shift
WARNING: shift/reduce conflict for STRING in state 44 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 48 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 56 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 62 resolved as shift
WARNING: shift/reduce conflict for OPER in state 62 resolved as shift
WARNING: shift/reduce conflict for ALB in state 62 resolved as shift
WARNING: shift/reduce conflict for ARB in state 62 resolved as shift
WARNING: shift/reduce conflict for OPER in state 66 resolved as shift
WARNING: shift/reduce conflict for OPER in state 83 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (p_module -> empty)
WARNING: rejected rule (body -> empty) in state 4
