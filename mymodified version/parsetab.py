
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALB ARB ARRAY BLESS COMMA COMMENT EQUALS HASH HASH_OP KEYWORD LB LFB MY NEW NUMBER OPER PACKAGE RB RETURN RFB SCALAR SEMI SHIFT STRING SUB newlbody : statementlist\n            | emptystatementlist : statement\n                    | statementlist statementstatement : var_dec\n                | function_call\n                | output\n                | comment\n                | cond_stat\n                | package_dec\n                | cons_dec\n                | function_def\n                | bless_st\n                | return_stpackage_dec : PACKAGE KEYWORD SEMI upind body lowind NUMBER SEMIcons_dec : SUB NEW blockbless_st : BLESS LB argument RB SEMIupind :lowind :function_def : SUB KEYWORD blockoutput : KEYWORD out SEMI out : variable\n            | STRING\n            | out COMMA out function_call : KEYWORD LB argument RB SEMIargument : variable\n                | STRING\n                | NUMBER\n                | argument COMMA argument\n                | emptyvar_dec : scalar_var EQUALS exp SEMI\n                | variable EQUALS input SEMI\n                | variable EQUALS SHIFT SEMI\n                | arr_var EQUALS arr_exp SEMI\n                | hash_var EQUALS hash_exp SEMIvariable : scalar_var\n                | arr_var\n                | hash_varscalar_var : MY SCALAR\n                | SCALARarr_var : MY ARRAY\n                | ARRAYhash_var : MY HASH\n                | HASHreturn_st : RETURN exp SEMIexp : NUMBER\n            | STRING\n            | variable\n            | exp OPER exparr_exp :  LB argument RBhash_exp : first_hash\n                | second_hashfirst_hash : LB hash_arg RBsecond_hash : LFB hash_arg RFBhash_arg : STRING\n                | NUMBER\n                | SHIFT\n                | hash_arg HASH_OP hash_arg\n                | hash_arg COMMA hash_arginput : ALB KEYWORD ARBcomment : COMMENTcond_stat : KEYWORD LB condition RB block\n                    | KEYWORD LB for_cond RB blockfor_cond : variable EQUALS exp SEMI variable sign exp SEMI incrementincrement : variable OPER OPER\n                    | variable sign expblock : l_braces body r_bracesl_braces : LFBr_braces : RFBcondition : variable sign expsign : EQUALS\n            | OPER\n            | ALB\n            | ARB\n            | sign signempty :'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,20,29,70,73,76,79,81,82,83,85,87,113,115,116,122,123,124,132,],[-76,0,-1,-2,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-4,-21,-16,-20,-45,-31,-32,-33,-34,-35,-25,-62,-63,-67,-69,-17,-15,]),'KEYWORD':([0,2,4,5,6,7,8,9,10,11,12,13,14,20,21,22,29,55,70,72,73,74,75,76,79,81,82,83,85,87,103,113,115,116,122,123,124,132,],[19,19,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,41,43,-4,84,-21,-18,-16,19,-68,-20,-45,-31,-32,-33,-34,-35,19,-25,-62,-63,-67,-69,-17,-15,]),'COMMENT':([0,2,4,5,6,7,8,9,10,11,12,13,14,20,29,70,72,73,74,75,76,79,81,82,83,85,87,103,113,115,116,122,123,124,132,],[20,20,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-4,-21,-18,-16,20,-68,-20,-45,-31,-32,-33,-34,-35,20,-25,-62,-63,-67,-69,-17,-15,]),'PACKAGE':([0,2,4,5,6,7,8,9,10,11,12,13,14,20,29,70,72,73,74,75,76,79,81,82,83,85,87,103,113,115,116,122,123,124,132,],[21,21,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-4,-21,-18,-16,21,-68,-20,-45,-31,-32,-33,-34,-35,21,-25,-62,-63,-67,-69,-17,-15,]),'SUB':([0,2,4,5,6,7,8,9,10,11,12,13,14,20,29,70,72,73,74,75,76,79,81,82,83,85,87,103,113,115,116,122,123,124,132,],[22,22,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-4,-21,-18,-16,22,-68,-20,-45,-31,-32,-33,-34,-35,22,-25,-62,-63,-67,-69,-17,-15,]),'BLESS':([0,2,4,5,6,7,8,9,10,11,12,13,14,20,29,70,72,73,74,75,76,79,81,82,83,85,87,103,113,115,116,122,123,124,132,],[23,23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-4,-21,-18,-16,23,-68,-20,-45,-31,-32,-33,-34,-35,23,-25,-62,-63,-67,-69,-17,-15,]),'RETURN':([0,2,4,5,6,7,8,9,10,11,12,13,14,20,29,70,72,73,74,75,76,79,81,82,83,85,87,103,113,115,116,122,123,124,132,],[24,24,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-4,-21,-18,-16,24,-68,-20,-45,-31,-32,-33,-34,-35,24,-25,-62,-63,-67,-69,-17,-15,]),'MY':([0,2,4,5,6,7,8,9,10,11,12,13,14,19,20,24,29,30,34,44,57,70,71,72,73,74,75,76,79,80,81,82,83,85,87,94,97,98,99,100,101,103,113,115,116,117,119,122,123,124,127,131,132,134,137,138,],[25,25,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,25,-61,25,-4,25,25,25,25,-21,25,-18,-16,25,-68,-20,-45,25,-31,-32,-33,-34,-35,25,25,25,-72,-73,-74,25,-25,-62,-63,-75,-71,-67,-69,-17,25,25,-15,25,-72,25,]),'SCALAR':([0,2,4,5,6,7,8,9,10,11,12,13,14,19,20,24,25,29,30,34,44,57,70,71,72,73,74,75,76,79,80,81,82,83,85,87,94,97,98,99,100,101,103,113,115,116,117,119,122,123,124,127,131,132,134,137,138,],[26,26,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,26,-61,26,49,-4,26,26,26,26,-21,26,-18,-16,26,-68,-20,-45,26,-31,-32,-33,-34,-35,26,26,26,-72,-73,-74,26,-25,-62,-63,-75,-71,-67,-69,-17,26,26,-15,26,-72,26,]),'ARRAY':([0,2,4,5,6,7,8,9,10,11,12,13,14,19,20,24,25,29,30,34,44,57,70,71,72,73,74,75,76,79,80,81,82,83,85,87,94,97,98,99,100,101,103,113,115,116,117,119,122,123,124,127,131,132,134,137,138,],[27,27,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,27,-61,27,50,-4,27,27,27,27,-21,27,-18,-16,27,-68,-20,-45,27,-31,-32,-33,-34,-35,27,27,27,-72,-73,-74,27,-25,-62,-63,-75,-71,-67,-69,-17,27,27,-15,27,-72,27,]),'HASH':([0,2,4,5,6,7,8,9,10,11,12,13,14,19,20,24,25,29,30,34,44,57,70,71,72,73,74,75,76,79,80,81,82,83,85,87,94,97,98,99,100,101,103,113,115,116,117,119,122,123,124,127,131,132,134,137,138,],[28,28,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,28,-61,28,51,-4,28,28,28,28,-21,28,-18,-16,28,-68,-20,-45,28,-31,-32,-33,-34,-35,28,28,28,-72,-73,-74,28,-25,-62,-63,-75,-71,-67,-69,-17,28,28,-15,28,-72,28,]),'RFB':([2,3,4,5,6,7,8,9,10,11,12,13,14,20,29,70,73,74,75,76,79,81,82,83,85,87,89,90,91,92,104,113,115,116,122,123,124,125,126,132,],[-1,-2,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-4,-21,-16,-76,-68,-20,-45,-31,-32,-33,-34,-35,-55,-56,-57,112,123,-25,-62,-63,-67,-69,-17,-58,-59,-15,]),'NUMBER':([2,3,4,5,6,7,8,9,10,11,12,13,14,20,24,29,30,34,44,57,61,62,70,72,73,76,79,80,81,82,83,85,87,94,97,98,99,100,101,103,110,111,113,115,116,117,119,121,122,123,124,128,131,132,137,138,],[-1,-2,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,46,-4,46,68,68,68,90,90,-21,-18,-16,-20,-45,46,-31,-32,-33,-34,-35,68,46,46,-72,-73,-74,-76,90,90,-25,-62,-63,-75,-71,-19,-67,-69,-17,130,46,-15,-72,46,]),'EQUALS':([15,16,17,18,26,27,28,38,39,40,49,50,51,66,97,98,99,100,101,117,119,129,131,135,137,138,],[30,31,32,33,-40,-42,-44,-36,-37,-38,-39,-41,-43,98,119,-71,-72,-73,-74,119,-71,119,119,119,-72,119,]),'LB':([19,23,32,33,],[34,44,57,61,]),'STRING':([19,24,30,34,44,57,61,62,71,80,94,97,98,99,100,101,110,111,117,119,131,137,138,],[37,47,47,67,67,67,89,89,37,47,67,47,47,-72,-73,-74,89,89,-75,-71,47,-72,47,]),'NEW':([22,],[42,]),'SEMI':([26,27,28,35,36,37,38,39,40,41,45,46,47,48,49,50,51,52,53,54,56,58,59,60,93,102,105,106,107,108,109,112,120,130,133,],[-40,-42,-44,70,-22,-23,-36,-37,-38,72,79,-46,-47,-48,-39,-41,-43,81,82,83,85,87,-51,-52,113,-24,124,-49,-60,-50,-53,-54,127,132,134,]),'COMMA':([26,27,28,34,35,36,37,38,39,40,44,49,50,51,57,63,66,67,68,69,77,78,86,88,89,90,91,92,94,102,114,125,126,],[-40,-42,-44,-76,71,-22,-23,-36,-37,-38,-76,-39,-41,-43,-76,94,-26,-27,-28,-30,94,-26,94,111,-55,-56,-57,111,-76,71,94,111,111,]),'OPER':([26,27,28,38,39,40,45,46,47,48,49,50,51,52,66,97,98,99,100,101,106,117,118,119,120,129,131,133,135,137,138,140,],[-40,-42,-44,-36,-37,-38,80,-46,-47,-48,-39,-41,-43,80,99,99,-71,-72,-73,-74,80,99,80,-71,80,99,99,80,137,139,99,80,]),'ALB':([26,27,28,31,38,39,40,49,50,51,66,97,98,99,100,101,117,119,129,131,135,137,138,],[-40,-42,-44,55,-36,-37,-38,-39,-41,-43,100,100,-71,-72,-73,-74,100,-71,100,100,100,-72,100,]),'ARB':([26,27,28,38,39,40,49,50,51,66,84,97,98,99,100,101,117,119,129,131,135,137,138,],[-40,-42,-44,-36,-37,-38,-39,-41,-43,101,107,101,-71,-72,-73,-74,101,-71,101,101,101,-72,101,]),'RB':([26,27,28,34,38,39,40,44,46,47,48,49,50,51,57,63,64,65,66,67,68,69,77,78,86,88,89,90,91,94,106,114,118,125,126,136,139,140,],[-40,-42,-44,-76,-36,-37,-38,-76,-46,-47,-48,-39,-41,-43,-76,93,95,96,-26,-27,-28,-30,105,-26,108,109,-55,-56,-57,-76,-49,-29,-70,-58,-59,-64,-65,-66,]),'SHIFT':([31,61,62,110,111,],[54,91,91,91,91,]),'LFB':([33,42,43,95,96,],[62,75,75,75,75,]),'HASH_OP':([88,89,90,91,92,125,126,],[110,-55,-56,-57,110,110,110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,74,103,],[1,104,121,]),'statementlist':([0,74,103,],[2,2,2,]),'empty':([0,34,44,57,74,94,103,],[3,69,69,69,3,69,3,]),'statement':([0,2,74,103,],[4,29,4,4,]),'var_dec':([0,2,74,103,],[5,5,5,5,]),'function_call':([0,2,74,103,],[6,6,6,6,]),'output':([0,2,74,103,],[7,7,7,7,]),'comment':([0,2,74,103,],[8,8,8,8,]),'cond_stat':([0,2,74,103,],[9,9,9,9,]),'package_dec':([0,2,74,103,],[10,10,10,10,]),'cons_dec':([0,2,74,103,],[11,11,11,11,]),'function_def':([0,2,74,103,],[12,12,12,12,]),'bless_st':([0,2,74,103,],[13,13,13,13,]),'return_st':([0,2,74,103,],[14,14,14,14,]),'scalar_var':([0,2,19,24,30,34,44,57,71,74,80,94,97,98,103,127,131,134,138,],[15,15,38,38,38,38,38,38,38,15,38,38,38,38,15,38,38,38,38,]),'variable':([0,2,19,24,30,34,44,57,71,74,80,94,97,98,103,127,131,134,138,],[16,16,36,48,48,66,78,78,36,16,48,78,48,48,16,129,48,135,48,]),'arr_var':([0,2,19,24,30,34,44,57,71,74,80,94,97,98,103,127,131,134,138,],[17,17,39,39,39,39,39,39,39,17,39,39,39,39,17,39,39,39,39,]),'hash_var':([0,2,19,24,30,34,44,57,71,74,80,94,97,98,103,127,131,134,138,],[18,18,40,40,40,40,40,40,40,18,40,40,40,40,18,40,40,40,40,]),'out':([19,71,],[35,102,]),'exp':([24,30,80,97,98,131,138,],[45,52,106,118,120,133,140,]),'input':([31,],[53,]),'arr_exp':([32,],[56,]),'hash_exp':([33,],[58,]),'first_hash':([33,],[59,]),'second_hash':([33,],[60,]),'argument':([34,44,57,94,],[63,77,86,114,]),'condition':([34,],[64,]),'for_cond':([34,],[65,]),'block':([42,43,95,96,],[73,76,115,116,]),'l_braces':([42,43,95,96,],[74,74,74,74,]),'hash_arg':([61,62,110,111,],[88,92,125,126,]),'sign':([66,97,117,129,131,135,138,],[97,117,117,131,117,138,117,]),'upind':([72,],[103,]),'r_braces':([104,],[122,]),'lowind':([121,],[128,]),'increment':([134,],[136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> statementlist','body',1,'p_body','parsing.py',10),
  ('body -> empty','body',1,'p_body','parsing.py',11),
  ('statementlist -> statement','statementlist',1,'p_statementlist','parsing.py',18),
  ('statementlist -> statementlist statement','statementlist',2,'p_statementlist','parsing.py',19),
  ('statement -> var_dec','statement',1,'p_statement','parsing.py',26),
  ('statement -> function_call','statement',1,'p_statement','parsing.py',27),
  ('statement -> output','statement',1,'p_statement','parsing.py',28),
  ('statement -> comment','statement',1,'p_statement','parsing.py',29),
  ('statement -> cond_stat','statement',1,'p_statement','parsing.py',30),
  ('statement -> package_dec','statement',1,'p_statement','parsing.py',31),
  ('statement -> cons_dec','statement',1,'p_statement','parsing.py',32),
  ('statement -> function_def','statement',1,'p_statement','parsing.py',33),
  ('statement -> bless_st','statement',1,'p_statement','parsing.py',34),
  ('statement -> return_st','statement',1,'p_statement','parsing.py',35),
  ('package_dec -> PACKAGE KEYWORD SEMI upind body lowind NUMBER SEMI','package_dec',8,'p_package_dec','parsing.py',41),
  ('cons_dec -> SUB NEW block','cons_dec',3,'p_cons_dec','parsing.py',47),
  ('bless_st -> BLESS LB argument RB SEMI','bless_st',5,'p_bless_st','parsing.py',52),
  ('upind -> <empty>','upind',0,'p_upind','parsing.py',57),
  ('lowind -> <empty>','lowind',0,'p_lowind','parsing.py',64),
  ('function_def -> SUB KEYWORD block','function_def',3,'p_function_def','parsing.py',71),
  ('output -> KEYWORD out SEMI','output',3,'p_output','parsing.py',78),
  ('out -> variable','out',1,'p_out','parsing.py',85),
  ('out -> STRING','out',1,'p_out','parsing.py',86),
  ('out -> out COMMA out','out',3,'p_out','parsing.py',87),
  ('function_call -> KEYWORD LB argument RB SEMI','function_call',5,'p_function_call','parsing.py',94),
  ('argument -> variable','argument',1,'p_argument','parsing.py',101),
  ('argument -> STRING','argument',1,'p_argument','parsing.py',102),
  ('argument -> NUMBER','argument',1,'p_argument','parsing.py',103),
  ('argument -> argument COMMA argument','argument',3,'p_argument','parsing.py',104),
  ('argument -> empty','argument',1,'p_argument','parsing.py',105),
  ('var_dec -> scalar_var EQUALS exp SEMI','var_dec',4,'p_var_dec','parsing.py',112),
  ('var_dec -> variable EQUALS input SEMI','var_dec',4,'p_var_dec','parsing.py',113),
  ('var_dec -> variable EQUALS SHIFT SEMI','var_dec',4,'p_var_dec','parsing.py',114),
  ('var_dec -> arr_var EQUALS arr_exp SEMI','var_dec',4,'p_var_dec','parsing.py',115),
  ('var_dec -> hash_var EQUALS hash_exp SEMI','var_dec',4,'p_var_dec','parsing.py',116),
  ('variable -> scalar_var','variable',1,'p_variable','parsing.py',130),
  ('variable -> arr_var','variable',1,'p_variable','parsing.py',131),
  ('variable -> hash_var','variable',1,'p_variable','parsing.py',132),
  ('scalar_var -> MY SCALAR','scalar_var',2,'p_scalar_var','parsing.py',137),
  ('scalar_var -> SCALAR','scalar_var',1,'p_scalar_var','parsing.py',138),
  ('arr_var -> MY ARRAY','arr_var',2,'p_arr_var','parsing.py',146),
  ('arr_var -> ARRAY','arr_var',1,'p_arr_var','parsing.py',147),
  ('hash_var -> MY HASH','hash_var',2,'p_hash_var','parsing.py',155),
  ('hash_var -> HASH','hash_var',1,'p_hash_var','parsing.py',156),
  ('return_st -> RETURN exp SEMI','return_st',3,'p_return_st','parsing.py',164),
  ('exp -> NUMBER','exp',1,'p_exp','parsing.py',169),
  ('exp -> STRING','exp',1,'p_exp','parsing.py',170),
  ('exp -> variable','exp',1,'p_exp','parsing.py',171),
  ('exp -> exp OPER exp','exp',3,'p_exp','parsing.py',172),
  ('arr_exp -> LB argument RB','arr_exp',3,'p_arr_exp','parsing.py',181),
  ('hash_exp -> first_hash','hash_exp',1,'p_hash_exp','parsing.py',186),
  ('hash_exp -> second_hash','hash_exp',1,'p_hash_exp','parsing.py',187),
  ('first_hash -> LB hash_arg RB','first_hash',3,'p_first_hash','parsing.py',192),
  ('second_hash -> LFB hash_arg RFB','second_hash',3,'p_second_hash','parsing.py',209),
  ('hash_arg -> STRING','hash_arg',1,'p_hash_arg','parsing.py',226),
  ('hash_arg -> NUMBER','hash_arg',1,'p_hash_arg','parsing.py',227),
  ('hash_arg -> SHIFT','hash_arg',1,'p_hash_arg','parsing.py',228),
  ('hash_arg -> hash_arg HASH_OP hash_arg','hash_arg',3,'p_hash_arg','parsing.py',229),
  ('hash_arg -> hash_arg COMMA hash_arg','hash_arg',3,'p_hash_arg','parsing.py',230),
  ('input -> ALB KEYWORD ARB','input',3,'p_input','parsing.py',235),
  ('comment -> COMMENT','comment',1,'p_comment','parsing.py',242),
  ('cond_stat -> KEYWORD LB condition RB block','cond_stat',5,'p_cond_stat','parsing.py',249),
  ('cond_stat -> KEYWORD LB for_cond RB block','cond_stat',5,'p_cond_stat','parsing.py',250),
  ('for_cond -> variable EQUALS exp SEMI variable sign exp SEMI increment','for_cond',9,'p_for_cond','parsing.py',257),
  ('increment -> variable OPER OPER','increment',3,'p_increment','parsing.py',266),
  ('increment -> variable sign exp','increment',3,'p_increment','parsing.py',267),
  ('block -> l_braces body r_braces','block',3,'p_block','parsing.py',277),
  ('l_braces -> LFB','l_braces',1,'p_l_braces','parsing.py',283),
  ('r_braces -> RFB','r_braces',1,'p_r_braces','parsing.py',290),
  ('condition -> variable sign exp','condition',3,'p_condition','parsing.py',297),
  ('sign -> EQUALS','sign',1,'p_sign','parsing.py',304),
  ('sign -> OPER','sign',1,'p_sign','parsing.py',305),
  ('sign -> ALB','sign',1,'p_sign','parsing.py',306),
  ('sign -> ARB','sign',1,'p_sign','parsing.py',307),
  ('sign -> sign sign','sign',2,'p_sign','parsing.py',308),
  ('empty -> <empty>','empty',0,'p_empty','parsing.py',320),
]
